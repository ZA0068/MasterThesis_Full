import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Vector3, PoseStamped

class DroneFeedbackController(Node):

    def __init__(self):
        super().__init__('drone_feedback_controller')
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.vx = 0.0
        self.vy = 0.0
        self.vz = 0.0
        self.pose_subscriber = self.create_subscription(
            PoseStamped,
            'topic',
            self.pose_callback,
            10)
        self.velocity_subscriber = self.create_subscription(
            Vector3,
            'topic',
            self.velocity_callback,
            10)

    def pose_callback(self, msg):
        self.x = msg.pose.position.x
        self.y = msg.pose.position.y
        self.z = msg.pose.position.z
        rclpy.logging.get_logger('rclpy').info('x: %f, y: %f, z: %f', self.x, self.y, self.z)
        

    def velocity_callback(self, msg):
        self.vx = msg.x
        self.vy = msg.y
        self.vz = msg.z
        rclpy.logging.get_logger('rclpy').info('vx: %f, vy: %f, vz: %f', self.vx, self.vy, self.vz)

def main(args=None):
    rclpy.init(args=args)
    minimal_subscriber = DroneFeedbackController()
    rclpy.spin(minimal_subscriber)
    minimal_subscriber.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()