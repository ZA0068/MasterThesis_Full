[0.000000] (-) TimerEvent: {}
[0.000347] (-) JobUnselected: {'identifier': 'sim_ros2_interface'}
[0.000611] (drone_controller_vrep) JobQueued: {'identifier': 'drone_controller_vrep', 'dependencies': OrderedDict()}
[0.000914] (drone_controller_vrep) JobStarted: {'identifier': 'drone_controller_vrep'}
[0.078220] (drone_controller_vrep) JobProgress: {'identifier': 'drone_controller_vrep', 'progress': 'cmake'}
[0.080052] (drone_controller_vrep) JobProgress: {'identifier': 'drone_controller_vrep', 'progress': 'build'}
[0.081522] (drone_controller_vrep) Command: {'cmd': ['/usr/local/bin/cmake', '--build', '/home/zain/Projects/MasterThesis/build/drone_controller_vrep', '--', '-j16', '-l16'], 'cwd': '/home/zain/Projects/MasterThesis/build/drone_controller_vrep', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('CONDA_PROMPT_MODIFIER', '(MasterThesis)'), ('SVGA_VGPU10', '0'), ('LANGUAGE', 'en_US:en'), ('USER', 'zain'), ('XDG_SEAT', 'seat0'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/zain'), ('OLDPWD', '/home/zain/Projects/MasterThesis'), ('LESS', '-R'), ('CONDA_SHLVL', '2'), ('DESKTOP_SESSION', 'cinnamon'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('ZSH', '/home/zain/.oh-my-zsh'), ('LSCOLORS', 'Gxfxcxdxbxegedabagacad'), ('GTK_MODULES', 'gail:atk-bridge'), ('XDG_SEAT_PATH', '/org/freedesktop/DisplayManager/Seat0'), ('PAGER', 'less'), ('ROS_PYTHON_VERSION', '3'), ('EIT_DIR', '/home/zain/Projects/eit_ros2_ws'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('CINNAMON_VERSION', '6.0.4'), ('P9K_TTY', 'old'), ('MODULAR_HOME', '/home/zain/.modular'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '49281'), ('COLORTERM', 'truecolor'), ('_CE_M', ''), ('QT_QPA_PLATFORMTHEME', 'qt5ct'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'zain'), ('_P9K_SSH_TTY', '/dev/pts/3'), ('_', '/usr/bin/colcon'), ('XDG_SESSION_CLASS', 'user'), ('ROS_VERSION', '2'), ('XDG_SESSION_ID', 'c2'), ('TERM', 'xterm-256color'), ('COPPELIASIM_ROOT_DIR', '/opt/CoppeliaSim_Edu_V4_6_0_rev18_Ubuntu22_04'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('_CE_CONDA', ''), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/zain/.modular/pkg/packages.modular.com_mojo/bin:/opt/anaconda3/envs/MasterThesis/bin:/opt/anaconda3/condabin:/home/zain/bin:/usr/local/bin:/opt/gcc-arm-none-eabi-9-2020-q2-update/bin:/home/zain/.cargo/bin:/home/zain/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/zain-ZenBook-Pro-Duo-UX581LV-UX581LV:@/tmp/.ICE-unix/2675,unix/zain-ZenBook-Pro-Duo-UX581LV-UX581LV:/tmp/.ICE-unix/2675'), ('GTK3_MODULES', 'xapp-gtk3-module'), ('GDM_LANG', 'en_US'), ('PROJ_NETWORK', 'ON'), ('XDG_SESSION_PATH', '/org/freedesktop/DisplayManager/Session0'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('PROJ_DATA', '/opt/anaconda3/envs/MasterThesis/share/proj'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'X-Cinnamon'), ('PX4_DIR', '/home/zain/Repositories/PX4-Autopilot'), ('CONDA_PREFIX_1', '/opt/anaconda3'), ('XDG_SESSION_DESKTOP', 'cinnamon'), ('XAUTHORITY', '/home/zain/.Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('XDG_GREETER_DATA_DIR', '/var/lib/lightdm-data/zain'), ('CONDA_PYTHON_EXE', '/opt/anaconda3/bin/python'), ('GSETTINGS_SCHEMA_DIR', '/opt/anaconda3/envs/MasterThesis/share/glib-2.0/schemas'), ('XML_CATALOG_FILES', 'file:///opt/anaconda3/envs/MasterThesis/etc/xml/catalog file:///etc/xml/catalog'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('TERMINATOR_UUID', 'urn:uuid:0b4ee222-2033-4784-9a47-6311a01fc5f6'), ('SHELL', '/usr/bin/zsh'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'cinnamon'), ('CONDA_DEFAULT_ENV', 'MasterThesis'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('P9K_SSH', '0'), ('XDG_VTNR', '7'), ('LC_ALL', 'en_US.UTF-8'), ('PWD', '/home/zain/Projects/MasterThesis/build/drone_controller_vrep'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-cinnamon:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/cinnamon:/usr/share/gnome:/home/zain/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share'), ('_P9K_TTY', '/dev/pts/3'), ('CONDA_EXE', '/opt/anaconda3/bin/conda'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('CONDA_PREFIX', '/opt/anaconda3/envs/MasterThesis'), ('GSETTINGS_SCHEMA_DIR_CONDA_BACKUP', ''), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('EDITOR', 'code'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.099710] (-) TimerEvent: {}
[0.150690] (drone_controller_vrep) StdoutLine: {'line': b'[ 33%] \x1b[32mBuilding CXX object CMakeFiles/drone_feedback_controller_node.dir/src/drone_feedback_controller.cpp.o\x1b[0m\n'}
[0.199905] (-) TimerEvent: {}
[0.300472] (-) TimerEvent: {}
[0.401175] (-) TimerEvent: {}
[0.501815] (-) TimerEvent: {}
[0.602225] (-) TimerEvent: {}
[0.702905] (-) TimerEvent: {}
[0.803224] (-) TimerEvent: {}
[0.903506] (-) TimerEvent: {}
[1.003727] (-) TimerEvent: {}
[1.103946] (-) TimerEvent: {}
[1.204232] (-) TimerEvent: {}
[1.304644] (-) TimerEvent: {}
[1.404886] (-) TimerEvent: {}
[1.505135] (-) TimerEvent: {}
[1.605384] (-) TimerEvent: {}
[1.705708] (-) TimerEvent: {}
[1.806148] (-) TimerEvent: {}
[1.906516] (-) TimerEvent: {}
[2.007157] (-) TimerEvent: {}
[2.107754] (-) TimerEvent: {}
[2.208373] (-) TimerEvent: {}
[2.309453] (-) TimerEvent: {}
[2.410133] (-) TimerEvent: {}
[2.510478] (-) TimerEvent: {}
[2.610887] (-) TimerEvent: {}
[2.711329] (-) TimerEvent: {}
[2.811887] (-) TimerEvent: {}
[2.912316] (-) TimerEvent: {}
[3.012616] (-) TimerEvent: {}
[3.113139] (-) TimerEvent: {}
[3.213690] (-) TimerEvent: {}
[3.314225] (-) TimerEvent: {}
[3.383736] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/logging.hpp:24\x1b[m\x1b[K,\n'}
[3.384290] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/client.hpp:40\x1b[m\x1b[K,\n'}
[3.384447] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:24\x1b[m\x1b[K,\n'}
[3.384556] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.384677] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.384773] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.384864] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.384949] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.385031] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.385119] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.385201] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.385278] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:6\x1b[m\x1b[K,\n'}
[3.385340] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.385397] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid DroneFeedbackController::drone_pose(const PoseStamped&) const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.385462] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:16:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst PoseStamped\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst struct geometry_msgs::msg::PoseStamped_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} has no member named \xe2\x80\x98\x1b[01m\x1b[Kdata\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385526] (drone_controller_vrep) StderrLine: {'line': b'   16 |       RCLCPP_INFO(this->get_logger(), "I heard: \'%s\'", msg.\x1b[01;31m\x1b[Kdata\x1b[m\x1b[K.c_str());\n'}
[3.385599] (drone_controller_vrep) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[3.385651] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid DroneFeedbackController::drone_vel(const Vector3&) const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.385726] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:21:60:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[K\xe2\x80\x98\x1b[01m\x1b[Kconst Vector3\x1b[m\x1b[K\xe2\x80\x99 {aka \xe2\x80\x98\x1b[01m\x1b[Kconst struct geometry_msgs::msg::Vector3_<std::allocator<void> >\x1b[m\x1b[K\xe2\x80\x99} has no member named \xe2\x80\x98\x1b[01m\x1b[Kdata\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.385825] (drone_controller_vrep) StderrLine: {'line': b'   21 |       RCLCPP_INFO(this->get_logger(), "I heard: \'%s\'", msg.\x1b[01;31m\x1b[Kdata\x1b[m\x1b[K.c_str());\n'}
[3.385881] (drone_controller_vrep) StderrLine: {'line': b'      |                                                            \x1b[01;31m\x1b[K^~~~\x1b[m\x1b[K\n'}
[3.414411] (-) TimerEvent: {}
[3.515005] (-) TimerEvent: {}
[3.615653] (-) TimerEvent: {}
[3.716459] (-) TimerEvent: {}
[3.817378] (-) TimerEvent: {}
[3.918041] (-) TimerEvent: {}
[4.018848] (-) TimerEvent: {}
[4.119406] (-) TimerEvent: {}
[4.219802] (-) TimerEvent: {}
[4.320442] (-) TimerEvent: {}
[4.420823] (-) TimerEvent: {}
[4.521415] (-) TimerEvent: {}
[4.621964] (-) TimerEvent: {}
[4.721550] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[4.721943] (-) TimerEvent: {}
[4.722220] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[4.722620] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.722704] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.722760] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.722813] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.722864] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.722934] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.722988] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.723038] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.723109] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:6\x1b[m\x1b[K,\n'}
[4.723159] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.723218] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.723279] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.723366] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.723429] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.723493] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.723550] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[4.723603] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>::function(std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.723655] (drone_controller_vrep) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[4.723704] (drone_controller_vrep) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.723752] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[4.723800] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[4.723849] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[4.723896] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[4.723944] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[4.723991] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[4.724039] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[4.724086] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[4.724134] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[4.724180] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[4.724228] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.724277] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.724333] (drone_controller_vrep) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[4.724381] (drone_controller_vrep) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.724430] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.724480] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[4.724528] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/exception_ptr.h:43\x1b[m\x1b[K,\n'}
[4.724581] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/exception:153\x1b[m\x1b[K,\n'}
[4.724629] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/detail/_exception.h:12\x1b[m\x1b[K,\n'}
[4.724681] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library/std/_prefix.h:21\x1b[m\x1b[K,\n'}
[4.724733] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library/std.h:12\x1b[m\x1b[K,\n'}
[4.724781] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library.h:14\x1b[m\x1b[K,\n'}
[4.724830] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef.h:16\x1b[m\x1b[K,\n'}
[4.724879] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/config.hpp:17\x1b[m\x1b[K,\n'}
[4.724926] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/duration.hpp:33\x1b[m\x1b[K,\n'}
[4.724973] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:11\x1b[m\x1b[K,\n'}
[4.725020] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[4.725067] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[4.725115] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[4.725163] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.725212] (drone_controller_vrep) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.725261] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>::_Callable<std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&, std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>, std::__invoke_result<std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&, const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&> >; _Tp = void; _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725315] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725371] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725440] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725504] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725565] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725624] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[4.725674] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.725725] (drone_controller_vrep) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[4.725775] (drone_controller_vrep) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.725823] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[4.725871] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[4.725924] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[4.726133] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[4.726185] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[4.726235] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[4.726283] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[4.726332] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[4.726408] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[4.726458] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[4.726508] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.726562] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.726613] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.726667] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.726728] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.726794] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.726847] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[4.726895] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.726946] (drone_controller_vrep) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[4.726994] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.727042] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727100] (drone_controller_vrep) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[4.727148] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.727196] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727246] (drone_controller_vrep) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[4.727294] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.727346] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727396] (drone_controller_vrep) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[4.727447] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.727495] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727548] (drone_controller_vrep) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[4.727596] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.727645] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727695] (drone_controller_vrep) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[4.727743] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[4.727791] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.727841] (drone_controller_vrep) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[4.727890] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.727939] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[4.762802] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[4.763313] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[4.763388] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[4.763442] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[4.763493] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[4.763542] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[4.763612] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[4.763669] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[4.763721] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[4.763770] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[4.763819] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:6\x1b[m\x1b[K,\n'}
[4.763890] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.763946] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[4.764001] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Vector3_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.764078] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Vector3_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.764138] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.764194] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.764250] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:8:90:\x1b[m\x1b[K   required from here\n'}
[4.764298] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>::function(std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.764358] (drone_controller_vrep) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[4.764407] (drone_controller_vrep) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[4.764454] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[4.764503] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[4.764560] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[4.764609] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[4.764657] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[4.764706] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[4.764756] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[4.764806] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[4.764853] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[4.764901] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[4.764951] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[4.764999] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765050] (drone_controller_vrep) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[4.765098] (drone_controller_vrep) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.765148] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[4.765196] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765260] (drone_controller_vrep) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[4.765320] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.765370] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765426] (drone_controller_vrep) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[4.765475] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.765529] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765580] (drone_controller_vrep) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[4.765630] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.765678] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765730] (drone_controller_vrep) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[4.765779] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[4.765826] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.765888] (drone_controller_vrep) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[4.765936] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.765986] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.766036] (drone_controller_vrep) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[4.766083] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[4.766131] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[4.766181] (drone_controller_vrep) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[4.766228] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[4.766275] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[4.822061] (-) TimerEvent: {}
[4.922457] (-) TimerEvent: {}
[5.022988] (-) TimerEvent: {}
[5.123518] (-) TimerEvent: {}
[5.224138] (-) TimerEvent: {}
[5.324601] (-) TimerEvent: {}
[5.425209] (-) TimerEvent: {}
[5.525941] (-) TimerEvent: {}
[5.626500] (-) TimerEvent: {}
[5.727095] (-) TimerEvent: {}
[5.827597] (-) TimerEvent: {}
[5.928154] (-) TimerEvent: {}
[6.028774] (-) TimerEvent: {}
[6.129254] (-) TimerEvent: {}
[6.229472] (-) TimerEvent: {}
[6.329713] (-) TimerEvent: {}
[6.430096] (-) TimerEvent: {}
[6.530429] (-) TimerEvent: {}
[6.630645] (-) TimerEvent: {}
[6.730878] (-) TimerEvent: {}
[6.831117] (-) TimerEvent: {}
[6.931332] (-) TimerEvent: {}
[7.031545] (-) TimerEvent: {}
[7.131753] (-) TimerEvent: {}
[7.231962] (-) TimerEvent: {}
[7.332190] (-) TimerEvent: {}
[7.432409] (-) TimerEvent: {}
[7.529824] (drone_controller_vrep) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/drone_feedback_controller_node.dir/build.make:76: CMakeFiles/drone_feedback_controller_node.dir/src/drone_feedback_controller.cpp.o] Error 1\n'}
[7.529991] (drone_controller_vrep) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/drone_feedback_controller_node.dir/all] Error 2\n'}
[7.530086] (drone_controller_vrep) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[7.531082] (drone_controller_vrep) CommandEnded: {'returncode': 2}
[7.532466] (-) TimerEvent: {}
[7.592447] (drone_controller_vrep) JobEnded: {'identifier': 'drone_controller_vrep', 'rc': 2}
[7.603334] (-) EventReactorShutdown: {}
