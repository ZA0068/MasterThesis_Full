[0.000000] (-) TimerEvent: {}
[0.000290] (-) JobUnselected: {'identifier': 'sim_ros2_interface'}
[0.000497] (drone_controller_vrep) JobQueued: {'identifier': 'drone_controller_vrep', 'dependencies': OrderedDict()}
[0.000623] (drone_controller_vrep) JobStarted: {'identifier': 'drone_controller_vrep'}
[0.056508] (drone_controller_vrep) JobProgress: {'identifier': 'drone_controller_vrep', 'progress': 'cmake'}
[0.057132] (drone_controller_vrep) JobProgress: {'identifier': 'drone_controller_vrep', 'progress': 'build'}
[0.057798] (drone_controller_vrep) Command: {'cmd': ['/usr/local/bin/cmake', '--build', '/home/zain/Projects/MasterThesis/build/drone_controller_vrep', '--', '-j16', '-l16'], 'cwd': '/home/zain/Projects/MasterThesis/build/drone_controller_vrep', 'env': OrderedDict([('GJS_DEBUG_TOPICS', 'JS ERROR;JS LOG'), ('CONDA_PROMPT_MODIFIER', '(MasterThesis)'), ('SVGA_VGPU10', '0'), ('LANGUAGE', 'en_US:en'), ('USER', 'zain'), ('XDG_SEAT', 'seat0'), ('XDG_SESSION_TYPE', 'x11'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/zain'), ('OLDPWD', '/home/zain/Projects/MasterThesis'), ('LESS', '-R'), ('CONDA_SHLVL', '2'), ('DESKTOP_SESSION', 'cinnamon'), ('GIO_LAUNCHED_DESKTOP_FILE', '/usr/share/applications/terminator.desktop'), ('ZSH', '/home/zain/.oh-my-zsh'), ('LSCOLORS', 'Gxfxcxdxbxegedabagacad'), ('GTK_MODULES', 'gail:atk-bridge'), ('XDG_SEAT_PATH', '/org/freedesktop/DisplayManager/Seat0'), ('PAGER', 'less'), ('ROS_PYTHON_VERSION', '3'), ('EIT_DIR', '/home/zain/Projects/eit_ros2_ws'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('CINNAMON_VERSION', '6.0.4'), ('P9K_TTY', 'old'), ('MODULAR_HOME', '/home/zain/.modular'), ('GIO_LAUNCHED_DESKTOP_FILE_PID', '49281'), ('COLORTERM', 'truecolor'), ('_CE_M', ''), ('QT_QPA_PLATFORMTHEME', 'qt5ct'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'zain'), ('_P9K_SSH_TTY', '/dev/pts/3'), ('_', '/usr/bin/colcon'), ('XDG_SESSION_CLASS', 'user'), ('ROS_VERSION', '2'), ('XDG_SESSION_ID', 'c2'), ('TERM', 'xterm-256color'), ('COPPELIASIM_ROOT_DIR', '/opt/CoppeliaSim_Edu_V4_6_0_rev18_Ubuntu22_04'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('_CE_CONDA', ''), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/zain/.modular/pkg/packages.modular.com_mojo/bin:/opt/anaconda3/envs/MasterThesis/bin:/opt/anaconda3/condabin:/home/zain/bin:/usr/local/bin:/opt/gcc-arm-none-eabi-9-2020-q2-update/bin:/home/zain/.cargo/bin:/home/zain/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin'), ('SESSION_MANAGER', 'local/zain-ZenBook-Pro-Duo-UX581LV-UX581LV:@/tmp/.ICE-unix/2675,unix/zain-ZenBook-Pro-Duo-UX581LV-UX581LV:/tmp/.ICE-unix/2675'), ('GTK3_MODULES', 'xapp-gtk3-module'), ('GDM_LANG', 'en_US'), ('PROJ_NETWORK', 'ON'), ('XDG_SESSION_PATH', '/org/freedesktop/DisplayManager/Session0'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('PROJ_DATA', '/opt/anaconda3/envs/MasterThesis/share/proj'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'X-Cinnamon'), ('PX4_DIR', '/home/zain/Repositories/PX4-Autopilot'), ('CONDA_PREFIX_1', '/opt/anaconda3'), ('XDG_SESSION_DESKTOP', 'cinnamon'), ('XAUTHORITY', '/home/zain/.Xauthority'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('XDG_GREETER_DATA_DIR', '/var/lib/lightdm-data/zain'), ('CONDA_PYTHON_EXE', '/opt/anaconda3/bin/python'), ('GSETTINGS_SCHEMA_DIR', '/opt/anaconda3/envs/MasterThesis/share/glib-2.0/schemas'), ('XML_CATALOG_FILES', 'file:///opt/anaconda3/envs/MasterThesis/etc/xml/catalog file:///etc/xml/catalog'), ('AMENT_PREFIX_PATH', '/opt/ros/humble'), ('TERMINATOR_UUID', 'urn:uuid:0b4ee222-2033-4784-9a47-6311a01fc5f6'), ('SHELL', '/usr/bin/zsh'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'cinnamon'), ('CONDA_DEFAULT_ENV', 'MasterThesis'), ('GPG_AGENT_INFO', '/run/user/1000/gnupg/S.gpg-agent:0:1'), ('GJS_DEBUG_OUTPUT', 'stderr'), ('P9K_SSH', '0'), ('XDG_VTNR', '7'), ('LC_ALL', 'en_US.UTF-8'), ('PWD', '/home/zain/Projects/MasterThesis/build/drone_controller_vrep'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-cinnamon:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/cinnamon:/usr/share/gnome:/home/zain/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share'), ('_P9K_TTY', '/dev/pts/3'), ('CONDA_EXE', '/opt/anaconda3/bin/conda'), ('PYTHONPATH', '/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('CONDA_PREFIX', '/opt/anaconda3/envs/MasterThesis'), ('GSETTINGS_SCHEMA_DIR_CONDA_BACKUP', ''), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('EDITOR', 'code'), ('CMAKE_PREFIX_PATH', '/opt/ros/humble')]), 'shell': False}
[0.099727] (-) TimerEvent: {}
[0.104915] (drone_controller_vrep) StdoutLine: {'line': b'[ 33%] \x1b[32mBuilding CXX object CMakeFiles/drone_feedback_controller_node.dir/src/drone_feedback_controller.cpp.o\x1b[0m\n'}
[0.199824] (-) TimerEvent: {}
[0.300086] (-) TimerEvent: {}
[0.400396] (-) TimerEvent: {}
[0.500761] (-) TimerEvent: {}
[0.601101] (-) TimerEvent: {}
[0.701457] (-) TimerEvent: {}
[0.801914] (-) TimerEvent: {}
[0.902604] (-) TimerEvent: {}
[1.003334] (-) TimerEvent: {}
[1.103860] (-) TimerEvent: {}
[1.204388] (-) TimerEvent: {}
[1.304707] (-) TimerEvent: {}
[1.405236] (-) TimerEvent: {}
[1.505720] (-) TimerEvent: {}
[1.606188] (-) TimerEvent: {}
[1.706581] (-) TimerEvent: {}
[1.806881] (-) TimerEvent: {}
[1.907374] (-) TimerEvent: {}
[2.007766] (-) TimerEvent: {}
[2.107986] (-) TimerEvent: {}
[2.208203] (-) TimerEvent: {}
[2.308425] (-) TimerEvent: {}
[2.408647] (-) TimerEvent: {}
[2.508868] (-) TimerEvent: {}
[2.609090] (-) TimerEvent: {}
[2.709314] (-) TimerEvent: {}
[2.788665] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid DroneFeedbackController::drone_pose(const PoseStamped&) const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.789010] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:14:82:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kunused parameter \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter\x07-Wunused-parameter\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.789092] (drone_controller_vrep) StderrLine: {'line': b'   14 | void DroneFeedbackController::drone_pose(\x1b[01;35m\x1b[Kconst geometry_msgs::msg::PoseStamped & msg\x1b[m\x1b[K) const\n'}
[2.789154] (drone_controller_vrep) StderrLine: {'line': b'      |                                          \x1b[01;35m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[2.789205] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:\x1b[m\x1b[K In member function \xe2\x80\x98\x1b[01m\x1b[Kvoid DroneFeedbackController::drone_vel(const Vector3&) const\x1b[m\x1b[K\xe2\x80\x99:\n'}
[2.789256] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:19:81:\x1b[m\x1b[K \x1b[01;35m\x1b[Kwarning: \x1b[m\x1b[Kunused parameter \xe2\x80\x98\x1b[01m\x1b[Kmsg\x1b[m\x1b[K\xe2\x80\x99 [\x1b[01;35m\x1b[K\x1b]8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-parameter\x07-Wunused-parameter\x1b]8;;\x07\x1b[m\x1b[K]\n'}
[2.789309] (drone_controller_vrep) StderrLine: {'line': b'   19 |     void DroneFeedbackController::drone_vel(\x1b[01;35m\x1b[Kconst geometry_msgs::msg::Vector3 & msg\x1b[m\x1b[K) const\n'}
[2.789359] (drone_controller_vrep) StderrLine: {'line': b'      |                                             \x1b[01;35m\x1b[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[2.809403] (-) TimerEvent: {}
[2.909628] (-) TimerEvent: {}
[3.009852] (-) TimerEvent: {}
[3.110072] (-) TimerEvent: {}
[3.210288] (-) TimerEvent: {}
[3.310509] (-) TimerEvent: {}
[3.410732] (-) TimerEvent: {}
[3.511047] (-) TimerEvent: {}
[3.611716] (-) TimerEvent: {}
[3.701015] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.701314] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.701528] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.701720] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.701774] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.701825] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.701874] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.701923] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.701974] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.702023] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.702072] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:6\x1b[m\x1b[K,\n'}
[3.702122] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.702173] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.702262] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702338] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702402] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702462] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702524] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[3.702579] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>::function(std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.702657] (drone_controller_vrep) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.702708] (drone_controller_vrep) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.702758] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.702807] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[3.702860] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[3.702930] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[3.702979] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[3.703027] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[3.703076] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[3.703126] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[3.703174] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[3.703223] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[3.703277] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.703327] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.703379] (drone_controller_vrep) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[3.703429] (drone_controller_vrep) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.703478] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.703528] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/bits/move.h:57\x1b[m\x1b[K,\n'}
[3.703577] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/bits/exception_ptr.h:43\x1b[m\x1b[K,\n'}
[3.703626] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/usr/include/c++/11/exception:153\x1b[m\x1b[K,\n'}
[3.703674] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/detail/_exception.h:12\x1b[m\x1b[K,\n'}
[3.703724] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library/std/_prefix.h:21\x1b[m\x1b[K,\n'}
[3.703773] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library/std.h:12\x1b[m\x1b[K,\n'}
[3.703821] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef/library.h:14\x1b[m\x1b[K,\n'}
[3.703869] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/predef.h:16\x1b[m\x1b[K,\n'}
[3.703918] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/config.hpp:17\x1b[m\x1b[K,\n'}
[3.703975] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/duration.hpp:33\x1b[m\x1b[K,\n'}
[3.704028] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:11\x1b[m\x1b[K,\n'}
[3.704079] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[3.704128] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[3.704177] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[3.704228] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.704279] (drone_controller_vrep) StderrLine: {'line': b'/usr/include/c++/11/type_traits: In substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<bool _Cond, class _Tp> using __enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.704350] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:353:8:\x1b[m\x1b[K   required by substitution of \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Res, class ... _ArgTypes> template<class _Cond, class _Tp> using _Requires = std::__enable_if_t<_Cond::value, _Tp> [with _Cond = std::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>::_Callable<std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&, std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>, std::__invoke_result<std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>&, const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&> >; _Tp = void; _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704406] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:434:9:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704460] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704525] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704597] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704659] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704712] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[3.704762] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/type_traits:2205:11:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno type named \xe2\x80\x98\x1b[01m\x1b[Ktype\x1b[m\x1b[K\xe2\x80\x99 in \xe2\x80\x98\x1b[01m\x1b[Kstruct std::enable_if<false, void>\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.704815] (drone_controller_vrep) StderrLine: {'line': b' 2205 |     using \x1b[01;31m\x1b[K__enable_if_t\x1b[m\x1b[K = typename enable_if<_Cond, _Tp>::type;\n'}
[3.704865] (drone_controller_vrep) StderrLine: {'line': b'      |           \x1b[01;31m\x1b[K^~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.704915] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.704966] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[3.705015] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[3.705067] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[3.705116] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[3.705168] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[3.705217] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[3.705266] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[3.705315] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[3.705363] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[3.705412] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.705460] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.705741] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.705808] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.705872] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.705937] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::PoseStamped_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::PoseStamped_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::PoseStamped_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.705997] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:6:94:\x1b[m\x1b[K   required from here\n'}
[3.706047] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706099] (drone_controller_vrep) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[3.706149] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.706247] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706301] (drone_controller_vrep) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[3.706348] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.706416] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706467] (drone_controller_vrep) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[3.706518] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.706568] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706620] (drone_controller_vrep) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[3.706669] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.706720] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706776] (drone_controller_vrep) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[3.706826] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.706873] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.706950] (drone_controller_vrep) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[3.707000] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.707051] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const geometry_msgs::msg::PoseStamped_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.707112] (drone_controller_vrep) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[3.707167] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.707225] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[3.711933] (-) TimerEvent: {}
[3.736280] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_base.hpp:32\x1b[m\x1b[K,\n'}
[3.736924] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/callback_group.hpp:29\x1b[m\x1b[K,\n'}
[3.737054] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_executable.hpp:20\x1b[m\x1b[K,\n'}
[3.737145] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategy.hpp:25\x1b[m\x1b[K,\n'}
[3.737227] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/memory_strategies.hpp:18\x1b[m\x1b[K,\n'}
[3.737316] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor_options.hpp:20\x1b[m\x1b[K,\n'}
[3.737404] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executor.hpp:37\x1b[m\x1b[K,\n'}
[3.737496] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors/multi_threaded_executor.hpp:25\x1b[m\x1b[K,\n'}
[3.737581] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/executors.hpp:21\x1b[m\x1b[K,\n'}
[3.737661] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/rclcpp.hpp:155\x1b[m\x1b[K,\n'}
[3.737744] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:6\x1b[m\x1b[K,\n'}
[3.737832] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.737922] (drone_controller_vrep) StderrLine: {'line': b'/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp: In instantiation of \xe2\x80\x98\x1b[01m\x1b[Krclcpp::AnySubscriptionCallback<MessageT, AllocatorT> rclcpp::AnySubscriptionCallback<MessageT, AllocatorT>::set(CallbackT) [with CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; AllocatorT = std::allocator<void>]\x1b[m\x1b[K\xe2\x80\x99:\n'}
[3.738020] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/subscription_factory.hpp:94:32:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Krclcpp::SubscriptionFactory rclcpp::create_subscription_factory(CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr, std::shared_ptr<rclcpp::topic_statistics::SubscriptionTopicStatistics<ROSMessageType> >) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; ROSMessageType = geometry_msgs::msg::Vector3_<std::allocator<void> >; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.738160] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:122:63:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::detail::create_subscription(NodeParametersT&, NodeTopicsT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; NodeParametersT = rclcpp::Node; NodeTopicsT = rclcpp::Node; ROSMessageType = geometry_msgs::msg::Vector3_<std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.738326] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/create_subscription.hpp:191:76:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::create_subscription(NodeT&, const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; NodeT = rclcpp::Node; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.738413] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/node_impl.hpp:99:47:\x1b[m\x1b[K   required from \xe2\x80\x98\x1b[01m\x1b[Kstd::shared_ptr<ROSMessageT> rclcpp::Node::create_subscription(const string&, const rclcpp::QoS&, CallbackT&&, const rclcpp::SubscriptionOptionsWithAllocator<AllocatorT>&, typename MessageMemoryStrategyT::SharedPtr) [with MessageT = geometry_msgs::msg::Vector3_<std::allocator<void> >; CallbackT = std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>; AllocatorT = std::allocator<void>; SubscriptionT = rclcpp::Subscription<geometry_msgs::msg::Vector3_<std::allocator<void> > >; MessageMemoryStrategyT = rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> >; std::string = std::__cxx11::basic_string<char>; typename MessageMemoryStrategyT::SharedPtr = std::shared_ptr<rclcpp::message_memory_strategy::MessageMemoryStrategy<geometry_msgs::msg::Vector3_<std::allocator<void> >, std::allocator<void> > >]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.738523] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:8:90:\x1b[m\x1b[K   required from here\n'}
[3.738607] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/opt/ros/humble/include/rclcpp/rclcpp/any_subscription_callback.hpp:394:27:\x1b[m\x1b[K \x1b[01;31m\x1b[Kerror: \x1b[m\x1b[Kno matching function for call to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>::function(std::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>&)\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.738754] (drone_controller_vrep) StderrLine: {'line': b'  394 |       callback_variant_ = \x1b[01;31m\x1b[Kstatic_cast<typename scbth::callback_type>(callback)\x1b[m\x1b[K;\n'}
[3.738848] (drone_controller_vrep) StderrLine: {'line': b'      |                           \x1b[01;31m\x1b[K^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\x1b[m\x1b[K\n'}
[3.738939] (drone_controller_vrep) StderrLine: {'line': b'In file included from \x1b[01m\x1b[K/usr/include/c++/11/functional:59\x1b[m\x1b[K,\n'}
[3.739024] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_category.hpp:18\x1b[m\x1b[K,\n'}
[3.739153] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/detail/error_code.hpp:14\x1b[m\x1b[K,\n'}
[3.739245] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/system/error_code.hpp:13\x1b[m\x1b[K,\n'}
[3.739334] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/detail/system.hpp:11\x1b[m\x1b[K,\n'}
[3.739419] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/system_clocks.hpp:64\x1b[m\x1b[K,\n'}
[3.739499] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/chrono.hpp:13\x1b[m\x1b[K,\n'}
[3.739582] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono/include.hpp:15\x1b[m\x1b[K,\n'}
[3.739666] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/opt/anaconda3/envs/MasterThesis/include/boost/chrono.hpp:17\x1b[m\x1b[K,\n'}
[3.739795] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/include/drone_controller_vrep/drone_feedback_controller.hpp:1\x1b[m\x1b[K,\n'}
[3.739902] (drone_controller_vrep) StderrLine: {'line': b'                 from \x1b[01m\x1b[K/home/zain/Projects/MasterThesis/src/drone_controller_vrep/src/drone_feedback_controller.cpp:1\x1b[m\x1b[K:\n'}
[3.739993] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Ktemplate<class _Functor, class _Constraints> std::function<_Res(_ArgTypes ...)>::function(_Functor&&) [with _Functor = _Functor; _Constraints = _Constraints; _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.740088] (drone_controller_vrep) StderrLine: {'line': b'  435 |         \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(_Functor&& __f)\n'}
[3.740173] (drone_controller_vrep) StderrLine: {'line': b'      |         \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.740261] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:435:9:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  template argument deduction/substitution failed:\n'}
[3.740356] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::function<_Res(_ArgTypes ...)>&&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.740467] (drone_controller_vrep) StderrLine: {'line': b'  404 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(function&& __x) noexcept\n'}
[3.740548] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.740630] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:404:27:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>&&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.740728] (drone_controller_vrep) StderrLine: {'line': b'  404 |       function(\x1b[01;36m\x1b[Kfunction&& __x\x1b[m\x1b[K) noexcept\n'}
[3.740813] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.740893] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(const std::function<_Res(_ArgTypes ...)>&) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.740986] (drone_controller_vrep) StderrLine: {'line': b'  386 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(const function& __x)\n'}
[3.741068] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.741149] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:386:32:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kconst std::function<void(const geometry_msgs::msg::Vector3_<std::allocator<void> >&)>&\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.741246] (drone_controller_vrep) StderrLine: {'line': b'  386 |       function(\x1b[01;36m\x1b[Kconst function& __x\x1b[m\x1b[K)\n'}
[3.741334] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K~~~~~~~~~~~~~~~~^~~\x1b[m\x1b[K\n'}
[3.741415] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function(std::nullptr_t) [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}; std::nullptr_t = std::nullptr_t]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.741499] (drone_controller_vrep) StderrLine: {'line': b'  375 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K(nullptr_t) noexcept\n'}
[3.741586] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.741671] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:375:16:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  no known conversion for argument 1 from \xe2\x80\x98\x1b[01m\x1b[Kstd::_Bind<void (DroneFeedbackController::*(DroneFeedbackController*, int))(const geometry_msgs::msg::Vector3_<std::allocator<void> >&) const>\x1b[m\x1b[K\xe2\x80\x99 to \xe2\x80\x98\x1b[01m\x1b[Kstd::nullptr_t\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.741769] (drone_controller_vrep) StderrLine: {'line': b'  375 |       function(\x1b[01;36m\x1b[Knullptr_t\x1b[m\x1b[K) noexcept\n'}
[3.741854] (drone_controller_vrep) StderrLine: {'line': b'      |                \x1b[01;36m\x1b[K^~~~~~~~~\x1b[m\x1b[K\n'}
[3.741936] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[Kcandidate: \xe2\x80\x98\x1b[01m\x1b[Kstd::function<_Res(_ArgTypes ...)>::function() [with _Res = void; _ArgTypes = {const geometry_msgs::msg::Vector3_<std::allocator<void> >&}]\x1b[m\x1b[K\xe2\x80\x99\n'}
[3.742026] (drone_controller_vrep) StderrLine: {'line': b'  368 |       \x1b[01;36m\x1b[Kfunction\x1b[m\x1b[K() noexcept\n'}
[3.742112] (drone_controller_vrep) StderrLine: {'line': b'      |       \x1b[01;36m\x1b[K^~~~~~~~\x1b[m\x1b[K\n'}
[3.742195] (drone_controller_vrep) StderrLine: {'line': b'\x1b[01m\x1b[K/usr/include/c++/11/bits/std_function.h:368:7:\x1b[m\x1b[K \x1b[01;36m\x1b[Knote: \x1b[m\x1b[K  candidate expects 0 arguments, 1 provided\n'}
[3.812026] (-) TimerEvent: {}
[3.912565] (-) TimerEvent: {}
[4.012834] (-) TimerEvent: {}
[4.113212] (-) TimerEvent: {}
[4.213883] (-) TimerEvent: {}
[4.314492] (-) TimerEvent: {}
[4.415074] (-) TimerEvent: {}
[4.515648] (-) TimerEvent: {}
[4.615990] (-) TimerEvent: {}
[4.716329] (-) TimerEvent: {}
[4.816680] (-) TimerEvent: {}
[4.917146] (-) TimerEvent: {}
[5.017365] (-) TimerEvent: {}
[5.117583] (-) TimerEvent: {}
[5.217812] (-) TimerEvent: {}
[5.318037] (-) TimerEvent: {}
[5.418250] (-) TimerEvent: {}
[5.518459] (-) TimerEvent: {}
[5.618676] (-) TimerEvent: {}
[5.718896] (-) TimerEvent: {}
[5.819125] (-) TimerEvent: {}
[5.919357] (-) TimerEvent: {}
[6.019583] (-) TimerEvent: {}
[6.119821] (-) TimerEvent: {}
[6.220074] (-) TimerEvent: {}
[6.320307] (-) TimerEvent: {}
[6.420575] (-) TimerEvent: {}
[6.427938] (drone_controller_vrep) StderrLine: {'line': b'gmake[2]: *** [CMakeFiles/drone_feedback_controller_node.dir/build.make:76: CMakeFiles/drone_feedback_controller_node.dir/src/drone_feedback_controller.cpp.o] Error 1\n'}
[6.428146] (drone_controller_vrep) StderrLine: {'line': b'gmake[1]: *** [CMakeFiles/Makefile2:137: CMakeFiles/drone_feedback_controller_node.dir/all] Error 2\n'}
[6.428271] (drone_controller_vrep) StderrLine: {'line': b'gmake: *** [Makefile:146: all] Error 2\n'}
[6.429305] (drone_controller_vrep) CommandEnded: {'returncode': 2}
[6.493806] (drone_controller_vrep) JobEnded: {'identifier': 'drone_controller_vrep', 'rc': 2}
[6.504678] (-) EventReactorShutdown: {}
